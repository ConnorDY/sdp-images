jenkins:
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users: []
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  numExecutors: 0
  slaveAgentPort: 50000
  location:
    adminAddress: "address not configured yet <nobody@nowhere>"
    url: "${JENKINS_PUBLIC_URL}"
unclassified:
  templateGlobalConfig:
    tier:
      librarySources:
      - scm:
          git:
            branches:
            - name: "*/master"
            buildChooser: "default"
            doGenerateSubmoduleConfigurations: false
            userRemoteConfigs:
            - credentialsId: "github"
              url: "https://github.com/boozallen/sdp-libraries"
      scm: "none"
groovy:
  - script: |
      // create jobs 
      import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject;
      import org.jenkinsci.plugins.github_branch_source.GitHubSCMSource;
      import hudson.plugins.git.GitSCM;
      import hudson.plugins.git.UserRemoteConfig;
      import jenkins.branch.BranchSource;
      import org.jenkinsci.plugins.github_branch_source.BranchDiscoveryTrait;
      import org.jenkinsci.plugins.github_branch_source.OriginPullRequestDiscoveryTrait;
      import jenkins.scm.api.trait.SCMSourceTrait;
      import jenkins.scm.impl.trait.WildcardSCMHeadFilterTrait;
      import org.boozallen.plugins.jte.config.TemplateConfigFolderProperty;
      import org.boozallen.plugins.jte.config.GovernanceTier;
      import org.boozallen.plugins.jte.job.TemplateBranchProjectFactory;
      import jenkins.model.Jenkins;

      def jenkins = Jenkins.get();
      def jobs = System.getenv("MULTIBRANCH_JOBS").split(",");

      jobs.each{ job -> 
        def owner, repo;
        (owner, repo) = job.split("/",2);
        def job_name = "${owner}_${repo}";
        if (!jenkins.getItem(job_name)){
            // create GitHub SCM source
            def scm_source = new GitHubSCMSource(owner, repo);
            scm_source.setCredentialsId("github");

            // set configuration
            List<SCMSourceTrait> traits = new ArrayList<>();
            traits.add(new BranchDiscoveryTrait(1));
            traits.add(new OriginPullRequestDiscoveryTrait(1));
            scm_source.setTraits(traits);

            // create branch source from SCM 
            def branch_source = new BranchSource(scm_source);
            List<BranchSource> sources = new ArrayList<>();
            sources.add(branch_source);

            // create multibranch job 
            def multi_branch_job = new WorkflowMultiBranchProject(jenkins, job_name);
            multi_branch_job.setSourcesList(sources);
            multi_branch_job.setProjectFactory(new TemplateBranchProjectFactory());

            // add job to jenkins 
            jenkins.add(multi_branch_job, multi_branch_job.name);
        }
      }

  - script: |
      // create first user 
      import jenkins.model.*
      import hudson.security.*

      def jenkins = Jenkins.get();

      def hudsonRealm = new HudsonPrivateSecurityRealm(false);
      def userName = System.getenv("ADMIN_USER");
      def password = System.getenv("ADMIN_PASSWORD");
      hudsonRealm.createAccount(userName, password);

      def strategy = new GlobalMatrixAuthorizationStrategy();
      strategy.add(Jenkins.ADMINISTER, userName);
      jenkins.setAuthorizationStrategy(strategy);

      jenkins.save()

  - script: | 
      import dev.lsegal.jenkins.codebuilder.CodeBuilderCloud;
      import jenkins.model.Jenkins;

      credentialsId = null;                                       // IAM profile or credentials file
      region        = System.getenv("CODEBUILD_PROJECT_REGION");  // the region for the project
      projectName   = System.getenv("CODEBUILD_PROJECT_NAME");    // the name of the project
      label         = null;                                       // set a label to limit builds
      jenkinsUrl    = null;                                       // use default Jenkins URL for JNLP
      jnlpImage     = null;                                       // use default JNLP Docker image
      computeType   = "BUILD_GENERAL1_SMALL";                     // use a small build instance

      // Remove previous cloud instances
      jenkins = Jenkins.get();
      prevInstances = jenkins.clouds.findAll { c -> c instanceof CodeBuilderCloud }
      jenkins.clouds.removeAll(prevInstances);

      // Re-add this cloud
      cbc = new CodeBuilderCloud(null, projectName, credentialsId, region);
      cbc.setLabel(label);
      cbc.setJenkinsUrl(jenkinsUrl);
      cbc.setJnlpImage(jnlpImage);
      cbc.setComputeType(computeType);
      jenkins.clouds.add(cbc);
      jenkins.save()